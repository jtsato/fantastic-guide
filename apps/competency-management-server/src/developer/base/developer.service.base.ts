/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Developer as PrismaDeveloper,
  DeveloperToolProficiency as PrismaDeveloperToolProficiency,
} from "@prisma/client";

export class DeveloperServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeveloperCountArgs, "select">
  ): Promise<number> {
    return this.prisma.developer.count(args);
  }

  async developers(
    args: Prisma.DeveloperFindManyArgs
  ): Promise<PrismaDeveloper[]> {
    return this.prisma.developer.findMany(args);
  }
  async developer(
    args: Prisma.DeveloperFindUniqueArgs
  ): Promise<PrismaDeveloper | null> {
    return this.prisma.developer.findUnique(args);
  }
  async createDeveloper(
    args: Prisma.DeveloperCreateArgs
  ): Promise<PrismaDeveloper> {
    return this.prisma.developer.create(args);
  }
  async updateDeveloper(
    args: Prisma.DeveloperUpdateArgs
  ): Promise<PrismaDeveloper> {
    return this.prisma.developer.update(args);
  }
  async deleteDeveloper(
    args: Prisma.DeveloperDeleteArgs
  ): Promise<PrismaDeveloper> {
    return this.prisma.developer.delete(args);
  }

  async findDeveloperToolProficiencies(
    parentId: string,
    args: Prisma.DeveloperToolProficiencyFindManyArgs
  ): Promise<PrismaDeveloperToolProficiency[]> {
    return this.prisma.developer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .developerToolProficiencies(args);
  }
}
