/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Developer } from "./Developer";
import { DeveloperCountArgs } from "./DeveloperCountArgs";
import { DeveloperFindManyArgs } from "./DeveloperFindManyArgs";
import { DeveloperFindUniqueArgs } from "./DeveloperFindUniqueArgs";
import { CreateDeveloperArgs } from "./CreateDeveloperArgs";
import { UpdateDeveloperArgs } from "./UpdateDeveloperArgs";
import { DeleteDeveloperArgs } from "./DeleteDeveloperArgs";
import { DeveloperToolProficiencyFindManyArgs } from "../../developerToolProficiency/base/DeveloperToolProficiencyFindManyArgs";
import { DeveloperToolProficiency } from "../../developerToolProficiency/base/DeveloperToolProficiency";
import { DeveloperService } from "../developer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Developer)
export class DeveloperResolverBase {
  constructor(
    protected readonly service: DeveloperService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Developer",
    action: "read",
    possession: "any",
  })
  async _developersMeta(
    @graphql.Args() args: DeveloperCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Developer])
  @nestAccessControl.UseRoles({
    resource: "Developer",
    action: "read",
    possession: "any",
  })
  async developers(
    @graphql.Args() args: DeveloperFindManyArgs
  ): Promise<Developer[]> {
    return this.service.developers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Developer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Developer",
    action: "read",
    possession: "own",
  })
  async developer(
    @graphql.Args() args: DeveloperFindUniqueArgs
  ): Promise<Developer | null> {
    const result = await this.service.developer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Developer)
  @nestAccessControl.UseRoles({
    resource: "Developer",
    action: "create",
    possession: "any",
  })
  async createDeveloper(
    @graphql.Args() args: CreateDeveloperArgs
  ): Promise<Developer> {
    return await this.service.createDeveloper({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Developer)
  @nestAccessControl.UseRoles({
    resource: "Developer",
    action: "update",
    possession: "any",
  })
  async updateDeveloper(
    @graphql.Args() args: UpdateDeveloperArgs
  ): Promise<Developer | null> {
    try {
      return await this.service.updateDeveloper({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Developer)
  @nestAccessControl.UseRoles({
    resource: "Developer",
    action: "delete",
    possession: "any",
  })
  async deleteDeveloper(
    @graphql.Args() args: DeleteDeveloperArgs
  ): Promise<Developer | null> {
    try {
      return await this.service.deleteDeveloper(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DeveloperToolProficiency], {
    name: "developerToolProficiencies",
  })
  @nestAccessControl.UseRoles({
    resource: "DeveloperToolProficiency",
    action: "read",
    possession: "any",
  })
  async findDeveloperToolProficiencies(
    @graphql.Parent() parent: Developer,
    @graphql.Args() args: DeveloperToolProficiencyFindManyArgs
  ): Promise<DeveloperToolProficiency[]> {
    const results = await this.service.findDeveloperToolProficiencies(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
