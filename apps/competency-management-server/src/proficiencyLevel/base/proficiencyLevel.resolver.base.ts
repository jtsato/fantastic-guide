/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProficiencyLevel } from "./ProficiencyLevel";
import { ProficiencyLevelCountArgs } from "./ProficiencyLevelCountArgs";
import { ProficiencyLevelFindManyArgs } from "./ProficiencyLevelFindManyArgs";
import { ProficiencyLevelFindUniqueArgs } from "./ProficiencyLevelFindUniqueArgs";
import { CreateProficiencyLevelArgs } from "./CreateProficiencyLevelArgs";
import { UpdateProficiencyLevelArgs } from "./UpdateProficiencyLevelArgs";
import { DeleteProficiencyLevelArgs } from "./DeleteProficiencyLevelArgs";
import { DeveloperToolProficiencyFindManyArgs } from "../../developerToolProficiency/base/DeveloperToolProficiencyFindManyArgs";
import { DeveloperToolProficiency } from "../../developerToolProficiency/base/DeveloperToolProficiency";
import { ProficiencyLevelService } from "../proficiencyLevel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProficiencyLevel)
export class ProficiencyLevelResolverBase {
  constructor(
    protected readonly service: ProficiencyLevelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProficiencyLevel",
    action: "read",
    possession: "any",
  })
  async _proficiencyLevelsMeta(
    @graphql.Args() args: ProficiencyLevelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProficiencyLevel])
  @nestAccessControl.UseRoles({
    resource: "ProficiencyLevel",
    action: "read",
    possession: "any",
  })
  async proficiencyLevels(
    @graphql.Args() args: ProficiencyLevelFindManyArgs
  ): Promise<ProficiencyLevel[]> {
    return this.service.proficiencyLevels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProficiencyLevel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProficiencyLevel",
    action: "read",
    possession: "own",
  })
  async proficiencyLevel(
    @graphql.Args() args: ProficiencyLevelFindUniqueArgs
  ): Promise<ProficiencyLevel | null> {
    const result = await this.service.proficiencyLevel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProficiencyLevel)
  @nestAccessControl.UseRoles({
    resource: "ProficiencyLevel",
    action: "create",
    possession: "any",
  })
  async createProficiencyLevel(
    @graphql.Args() args: CreateProficiencyLevelArgs
  ): Promise<ProficiencyLevel> {
    return await this.service.createProficiencyLevel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProficiencyLevel)
  @nestAccessControl.UseRoles({
    resource: "ProficiencyLevel",
    action: "update",
    possession: "any",
  })
  async updateProficiencyLevel(
    @graphql.Args() args: UpdateProficiencyLevelArgs
  ): Promise<ProficiencyLevel | null> {
    try {
      return await this.service.updateProficiencyLevel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProficiencyLevel)
  @nestAccessControl.UseRoles({
    resource: "ProficiencyLevel",
    action: "delete",
    possession: "any",
  })
  async deleteProficiencyLevel(
    @graphql.Args() args: DeleteProficiencyLevelArgs
  ): Promise<ProficiencyLevel | null> {
    try {
      return await this.service.deleteProficiencyLevel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DeveloperToolProficiency], {
    name: "developerToolProficiencies",
  })
  @nestAccessControl.UseRoles({
    resource: "DeveloperToolProficiency",
    action: "read",
    possession: "any",
  })
  async findDeveloperToolProficiencies(
    @graphql.Parent() parent: ProficiencyLevel,
    @graphql.Args() args: DeveloperToolProficiencyFindManyArgs
  ): Promise<DeveloperToolProficiency[]> {
    const results = await this.service.findDeveloperToolProficiencies(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
