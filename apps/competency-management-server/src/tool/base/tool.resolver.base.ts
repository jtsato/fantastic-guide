/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tool } from "./Tool";
import { ToolCountArgs } from "./ToolCountArgs";
import { ToolFindManyArgs } from "./ToolFindManyArgs";
import { ToolFindUniqueArgs } from "./ToolFindUniqueArgs";
import { CreateToolArgs } from "./CreateToolArgs";
import { UpdateToolArgs } from "./UpdateToolArgs";
import { DeleteToolArgs } from "./DeleteToolArgs";
import { DeveloperToolProficiencyFindManyArgs } from "../../developerToolProficiency/base/DeveloperToolProficiencyFindManyArgs";
import { DeveloperToolProficiency } from "../../developerToolProficiency/base/DeveloperToolProficiency";
import { ToolService } from "../tool.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tool)
export class ToolResolverBase {
  constructor(
    protected readonly service: ToolService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "read",
    possession: "any",
  })
  async _toolsMeta(
    @graphql.Args() args: ToolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tool])
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "read",
    possession: "any",
  })
  async tools(@graphql.Args() args: ToolFindManyArgs): Promise<Tool[]> {
    return this.service.tools(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tool, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "read",
    possession: "own",
  })
  async tool(@graphql.Args() args: ToolFindUniqueArgs): Promise<Tool | null> {
    const result = await this.service.tool(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tool)
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "create",
    possession: "any",
  })
  async createTool(@graphql.Args() args: CreateToolArgs): Promise<Tool> {
    return await this.service.createTool({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tool)
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "update",
    possession: "any",
  })
  async updateTool(@graphql.Args() args: UpdateToolArgs): Promise<Tool | null> {
    try {
      return await this.service.updateTool({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tool)
  @nestAccessControl.UseRoles({
    resource: "Tool",
    action: "delete",
    possession: "any",
  })
  async deleteTool(@graphql.Args() args: DeleteToolArgs): Promise<Tool | null> {
    try {
      return await this.service.deleteTool(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DeveloperToolProficiency], {
    name: "developerToolProficiencies",
  })
  @nestAccessControl.UseRoles({
    resource: "DeveloperToolProficiency",
    action: "read",
    possession: "any",
  })
  async findDeveloperToolProficiencies(
    @graphql.Parent() parent: Tool,
    @graphql.Args() args: DeveloperToolProficiencyFindManyArgs
  ): Promise<DeveloperToolProficiency[]> {
    const results = await this.service.findDeveloperToolProficiencies(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
