/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DeveloperToolProficiency as PrismaDeveloperToolProficiency,
  Developer as PrismaDeveloper,
  ProficiencyLevel as PrismaProficiencyLevel,
  Tool as PrismaTool,
} from "@prisma/client";

export class DeveloperToolProficiencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DeveloperToolProficiencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.developerToolProficiency.count(args);
  }

  async developerToolProficiencies(
    args: Prisma.DeveloperToolProficiencyFindManyArgs
  ): Promise<PrismaDeveloperToolProficiency[]> {
    return this.prisma.developerToolProficiency.findMany(args);
  }
  async developerToolProficiency(
    args: Prisma.DeveloperToolProficiencyFindUniqueArgs
  ): Promise<PrismaDeveloperToolProficiency | null> {
    return this.prisma.developerToolProficiency.findUnique(args);
  }
  async createDeveloperToolProficiency(
    args: Prisma.DeveloperToolProficiencyCreateArgs
  ): Promise<PrismaDeveloperToolProficiency> {
    return this.prisma.developerToolProficiency.create(args);
  }
  async updateDeveloperToolProficiency(
    args: Prisma.DeveloperToolProficiencyUpdateArgs
  ): Promise<PrismaDeveloperToolProficiency> {
    return this.prisma.developerToolProficiency.update(args);
  }
  async deleteDeveloperToolProficiency(
    args: Prisma.DeveloperToolProficiencyDeleteArgs
  ): Promise<PrismaDeveloperToolProficiency> {
    return this.prisma.developerToolProficiency.delete(args);
  }

  async getDeveloper(parentId: string): Promise<PrismaDeveloper | null> {
    return this.prisma.developerToolProficiency
      .findUnique({
        where: { id: parentId },
      })
      .developer();
  }

  async getProficiencyLevel(
    parentId: string
  ): Promise<PrismaProficiencyLevel | null> {
    return this.prisma.developerToolProficiency
      .findUnique({
        where: { id: parentId },
      })
      .proficiencyLevel();
  }

  async getTool(parentId: string): Promise<PrismaTool | null> {
    return this.prisma.developerToolProficiency
      .findUnique({
        where: { id: parentId },
      })
      .tool();
  }
}
